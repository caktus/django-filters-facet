from dataclasses import dataclass, field
from django.db.models import Count, Q


@dataclass
class Facet:
    """
    A facet is added to a filter to provide a count of results that
    share values within that filter's field.
    """

    items: list = field(default_factory=lambda: [])
    label: str = ""
    exclude: Q = None
    queryset: Q = None

    @property
    def field_name(self):
        """The associated filter's field name (likely the model's field name)."""
        return self.filter.filter_field_name

    @property
    def form(self):
        """The associated filter's Django form."""
        return self.filter.parent.form

    @property
    def form_field(self):
        """"""
        return self.form.fields[self.field_name]

    def get_queryset(self):
        qs = self.filter.parent.qs
        if self.exclude:
            qs = qs.exclude(self.exclude)
        if self.queryset:
            qs = self.queryset(qs)
        return qs

    def get_items(self):
        """
        Returns the count of results that share values for this field. By default,
        this is generated by annotating a values() QuerySet, but may be customized
        by passing in items when constructing the Facet.
        """
        if self.items:
            return self.items
        qs = self.get_queryset()
        return qs.values(self.field_name).annotate(count=Count("pk")).order_by("-count")

    def get_filtered_value(self):
        """Returns the FilterSet field's current filtered value."""
        form_value = self.form.data.get(self.field_name)
        if form_value:
            value = self.form.fields[self.field_name].to_python(form_value)
            if type(value) is str and value.isnumeric():
                value = int(value)
            return value

    def get_item_label(self, item_value):
        if not hasattr(self.form_field, "choices"):
            return item_value
        for value, label in self.form_field.choices:
            if value == item_value:
                return label

    def items_for_display(self):
        """Returns context data for displaying the facet's values and counts."""
        filtered_value = self.get_filtered_value()
        facet_item_counts = self.get_items()
        filtered_value_exists = filtered_value or filtered_value is False

        if filtered_value_exists and not facet_item_counts:
            # If this facet is filtered BUT there are no items, then the search reduced
            # the results to zero results. The facet should still show.
            facet_item_counts = [{self.field_name: filtered_value, "count": 0}]
        for item in facet_item_counts:
            item_value = item[self.field_name]
            if item_value is None and self.form_field.null_value:
                item_value = self.form_field.null_value
            item_label = self.get_item_label(item_value=item_value)
            item_is_active = filtered_value == item_value
            yield {
                "label": item_label,
                "value": item_value,
                "count": item["count"],
                "is_active": item_is_active,
            }
